@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);
}
@function str-split($string, $separator) {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index : str-index($string, $separator);
  // loop through string
  @while $index != null {
    // get the substring from the first character to the separator
    $item: str-slice($string, 1, $index - 1);
    // push item to array
    $split-arr: append($split-arr, $item);
    // remove item and separator from string
    $string: str-slice($string, $index + 1);
    // search new index of separator
    $index : str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

@function calculateVw($num, $breakpoint) {
  $vw-context: (($breakpoint/ 1px) * .01) * 1px;
  @return ($num/$vw-context) * 1vw;
}

@mixin vw($target, $num, $breakpoint) {
  #{$target} : calculateVw($num, $breakpoint);
}
//@include vw('padding-left',120px, $desktop-l);

@function calculateRem($size, $rootSize) {
  $remSize: $size / $rootSize;
  @return #{$remSize}rem;
}

@mixin rem($target, $size, $rootSize) {
  #{$target} : calculateRem($size, $rootSize);
}
//@include rem('font',22px, $basicfontsize);

@function calculateVwGroup($num, $breakpoint) {
  $vw-context: (($breakpoint/ 1px) * .01) * 1px;
  @return ((to-number($num)* 1px)/$vw-context) * 1vw;
}

@mixin vwGroup($target, $pxValues, $breakpoint) {
  $vwValues: '';
  $split-values: str-split(quote($pxValues), " ");
  $max: length($split-values);
  @for $i from 1 through $max {
    $value: calculateVwGroup(nth($split-values, $i), $breakpoint);

    $vwValues: #{$vwValues + $value};

    @if $i < $max {
      $vwValues: #{$vwValues + " "};
    }
  }

  #{$target} : $vwValues;
}

//@include vwGroup(padding, 120px 10px 120px 10px, $desktop-l);